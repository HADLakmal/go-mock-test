// Code generated by MockGen. DO NOT EDIT.
// Source: domain/divide.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDivide is a mock of Divide interface.
type MockDivide struct {
	ctrl     *gomock.Controller
	recorder *MockDivideMockRecorder
}

// MockDivideMockRecorder is the mock recorder for MockDivide.
type MockDivideMockRecorder struct {
	mock *MockDivide
}

// NewMockDivide creates a new mock instance.
func NewMockDivide(ctrl *gomock.Controller) *MockDivide {
	mock := &MockDivide{ctrl: ctrl}
	mock.recorder = &MockDivideMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDivide) EXPECT() *MockDivideMockRecorder {
	return m.recorder
}

// Divide mocks base method.
func (m *MockDivide) Divide(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Divide", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Divide indicates an expected call of Divide.
func (mr *MockDivideMockRecorder) Divide(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Divide", reflect.TypeOf((*MockDivide)(nil).Divide), a, b)
}
